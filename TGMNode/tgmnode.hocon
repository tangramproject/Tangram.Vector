 akka {
        loggers = ["Akka.Logger.Serilog.SerilogLogger, Akka.Logger.Serilog"]
        actor.provider = "Akka.Cluster.ClusterActorRefProvider, Akka.Cluster"
        remote {
            dot-netty.tcp {
                transport-class = "Akka.Remote.Transport.DotNetty.TcpTransport, Akka.Remote"
                transport-protocol = tcp
                dns-use-ipv6 = false
                enforce-ip-family = true
                hostname = "0.0.0.0"   
                port = 7001
            }
        }
        cluster {
            akka.extensions = ["Akka.Cluster.Tools.PublishSubscribe.DistributedPubSubExtensionProvider,Akka.Cluster.Tools"]
            downing-provider-class = "Akka.Cluster.SplitBrainResolver, Akka.Cluster"
            split-brain-resolver {
                # Enable one of the available strategies (see descriptions below):
                # static-quorum, keep-majority, keep-oldest, keep-referee 
                active-strategy = keep-majority
                
                # Decision is taken by the strategy when there has been no membership or
                # reachability changes for this duration, i.e. the cluster state is stable.
                stable-after = 20s

                # The strategy named static-quorum will down the unreachable nodes if the number 
                # of remaining nodes are greater than or equal to a configured quorum-size. 
                # Otherwise, it will down the reachable nodes
                static-quorum {
                    # if the 'role' is defined the decision is based only on members with that 'role'
                    role = ""
                    # Minimum number of nodes that the cluster must have (not the total size)
                    # Note that you must not add more members to the cluster than quorum-size * 2 - 1, 
                    # because then both sides may down each other and thereby form two separate clusters
                    quorum-size = 4
                }
            }
            auto-down-unreachable-after = off
            seed-nodes = ["akka.tcp://tangram-system@0.0.0.0:7001", "akka.tcp://tangram-system@0.0.0.0:6001"]
            roles : []
        }
        # Settings for the DistributedPubSub extension
        akka.cluster.pub-sub {
          # Actor name of the mediator actor, /system/distributedPubSubMediator
          name = distributedPubSubMediator

          # Start the mediator on members tagged with this role.
          # All members are used if undefined or empty.
          role = ""

          # The routing logic to use for 'Send'
          # Possible values: random, round-robin, broadcast
          routing-logic = random

          # How often the DistributedPubSubMediator should send out gossip information
          gossip-interval = 1s

          # Removed entries are pruned after this duration
          removed-time-to-live = 120s

          # Maximum number of elements to transfer in one message when synchronizing the registries.
          # Next chunk will be transferred in next round of gossip.
          max-delta-elements = 3000

          # The id of the dispatcher to use for DistributedPubSubMediator actors. 
          # If not specified default dispatcher is used.
          # If specified you need to define the settings of the actual dispatcher.
          use-dispatcher = ""
        }
    }